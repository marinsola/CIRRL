# Changelog

All notable changes to the CIRRL project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Complete package restructuring from notebook to proper Python package
- Multiple optimized DRIG estimator implementations
- Comprehensive documentation and examples
- Unit tests for core functionality
- Type hints throughout codebase
- Configuration file support (YAML)
- Makefile for common development tasks
- Example Jupyter notebook for quick start

## [0.1.0] - 2024-XX-XX

### Added
- Initial implementation of DPA (Distributional Principal Autoencoder)
- DRIG (Distributionally Robust Instrumental Regression) estimators:
  - Closed-form solution
  - Fast gradient descent
  - Mini-batch gradient descent for large datasets
  - Analytical initialization for faster convergence
  - Automatic method selection
- Training utilities with progressive learning
- Data loading and preprocessing utilities
- Single-cell experiment pipeline
- Basic visualization tools

### Features
- Multi-environment causal representation learning
- Hierarchical latent representations
- Environment-conditioned priors
- Energy loss with distributional robustness
- GPU acceleration support
- Batch and layer normalization options
- Residual block architecture

### Documentation
- Comprehensive README with usage examples
- Project structure guide
- API documentation
- Quick start notebook
- Configuration file examples

### Testing
- Unit tests for DRIG estimators
- Integration tests for training pipeline
- Test fixtures for synthetic data generation

### Infrastructure
- Package setup with pip installation
- Development environment configuration
- Git repository structure
- Continuous integration ready

## Version History

### Version Numbering
- **Major version** (X.0.0): Incompatible API changes
- **Minor version** (0.X.0): New features, backward compatible
- **Patch version** (0.0.X): Bug fixes, backward compatible

### Planned Features for Future Releases

#### [0.2.0] - Planned
- [ ] Additional DRIG variants (Anchor regression, DRO)
- [ ] More comprehensive evaluation metrics
- [ ] Visualization dashboard
- [ ] Pre-trained model zoo
- [ ] Improved documentation with tutorials

#### [0.3.0] - Planned
- [ ] Support for image data
- [ ] Support for time series data
- [ ] Multi-GPU training
- [ ] Hyperparameter optimization utilities
- [ ] Model interpretability tools

#### [1.0.0] - Planned
- [ ] Stable API
- [ ] Complete documentation
- [ ] Comprehensive test coverage (>90%)
- [ ] Performance benchmarks
- [ ] Paper reproduction code
- [ ] PyPI release

## Migration Guide

### From Notebook to Package (v0.1.0)

If you were using the original Jupyter notebook implementation:

**Old way:**
```python
# In notebook cell
from setup_singlecell import DPA, train_one_iter, eval_mse

dpa = DPA(...)
# Training code inline
```

**New way:**
```python
# Import from package
from cirrl import DPA, train_cirrl_model, eval_mse

dpa = DPA(...)
history = train_cirrl_model(dpa, X, Y, E, X_test, Y_test)
```

**Key changes:**
- All classes and functions are now importable from `cirrl` package
- Training logic is now in `cirrl.training.trainer`
- DRIG estimators are in `cirrl.estimators.drig`
- Data utilities are in `cirrl.utils.data`
- Model architectures are in `cirrl.models`

### Updating Your Code

1. **Install the package:**
   ```bash
   pip install -e .
   ```

2. **Update imports:**
   ```python
   # Old
   from setup_singlecell import DPA, OnlyRelu
   
   # New
   from cirrl import DPA, OnlyRelu
   # or
   from cirrl.models import DPA, OnlyRelu
   ```

3. **Use new training interface:**
   ```python
   # Old (manual training loop)
   for epoch in range(epochs):
       for batch in dataloader:
           # ... training code ...
   
   # New (use trainer)
   from cirrl.training import train_cirrl_model
   history = train_cirrl_model(dpa, X, Y, E, X_test, Y_test, epochs=1000)
   ```

4. **Use optimized DRIG estimators:**
   ```python
   # Old
   from setup_singlecell import drig_est
   coef = drig_est(z, y, gamma=5)
   
   # New (auto-select best method)
   from cirrl.estimators import est_drig_gd_auto
   coef = est_drig_gd_auto(train_data, gamma=5, device='cuda')
   ```

## Known Issues

### Current Limitations
- GPU memory usage can be high for large datasets with high sample_size
- Documentation is still incomplete in some areas
- Some features from the original notebook are not yet implemented

### Workarounds
- For large datasets, use `est_drig_gd_batch` with appropriate batch_size
- Reduce `sample_size` parameter in generation functions if running out of memory
- Use `device='cpu'` if GPU memory is insufficient

## Contributing

We welcome contributions! Please see CONTRIBUTING.md for guidelines.

### How to Contribute
1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass (`make test`)
6. Format code (`make format`)
7. Commit changes (`git commit -m 'Add amazing feature'`)
8. Push to branch (`git push origin feature/amazing-feature`)
9. Open a Pull Request

## Support

- **Issues**: Report bugs or request features on [GitHub Issues](https://github.com/yourusername/CIRRL/issues)
- **Discussions**: Ask questions on [GitHub Discussions](https://github.com/yourusername/CIRRL/discussions)
- **Email**: For private inquiries, contact [your-email@example.com]

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Citation

If you use CIRRL in your research, please cite:

```bibtex
@software{cirrl2024,
  title = {CIRRL: Causal Invariant Representation Learning},
  author = {Your Name},
  year = {2024},
  url = {https://github.com/yourusername/CIRRL},
  version = {0.1.0}
}
```

## Acknowledgments

- Original DPA implementation
- DRIG methodology from [reference paper]
- Single-cell dataset from [data source]
- Contributors and maintainers
