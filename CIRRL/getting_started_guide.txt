# Getting Started with CIRRL

This guide will help you migrate from the notebook-based implementation to the clean, organized package structure and get you up and running quickly.

## Table of Contents

1. [Overview](#overview)
2. [Installation](#installation)
3. [Migration from Notebook](#migration-from-notebook)
4. [Quick Start](#quick-start)
5. [Project Structure](#project-structure)
6. [Common Tasks](#common-tasks)
7. [Troubleshooting](#troubleshooting)

## Overview

CIRRL (Causal Invariant Representation Learning) combines:
- **DPA (Distributional Principal Autoencoder)** for learning representations
- **DRIG (Distributionally Robust Instrumental Regression)** for robust estimation

The new package structure provides:
- âœ… Clean, modular code organization
- âœ… Comprehensive documentation
- âœ… Optimized implementations
- âœ… Unit tests
- âœ… Easy installation
- âœ… GPU acceleration
- âœ… Type hints throughout

## Installation

### Quick Install

```bash
# Clone repository
git clone https://github.com/yourusername/CIRRL.git
cd CIRRL

# Install package
pip install -e .
```

### Full Development Setup

```bash
# Install with development tools
make install-dev

# Or manually
pip install -e ".[dev]"
pip install pytest pytest-cov black flake8 mypy

# Verify installation
make test
```

### Requirements

- Python 3.8+
- PyTorch 2.0+
- NumPy, SciPy, Pandas
- See `requirements.txt` for full list

## Migration from Notebook

### Step 1: Run Migration Script

```bash
chmod +x scripts/migrate_from_notebook.sh
./scripts/migrate_from_notebook.sh
```

This creates the directory structure and placeholder files.

### Step 2: Split Your Code

The old `setup_singlecell.py` should be split into:

| Old Location | New Location | Components |
|--------------|-------------|------------|
| `setup_singlecell.py` | `cirrl/models/networks.py` | `OnlyRelu`, `StoLayer`, `StoResBlock`, `StoNet` |
| `setup_singlecell.py` | `cirrl/models/dpa.py` | `DPAmodel`, `DPA` |
| `setup_singlecell.py` | `cirrl/utils/data.py` | `MyDS`, `make_dataloader`, data utilities |
| `setup_singlecell.py` | `cirrl/training/trainer.py` | `train_one_iter`, `eval_mse`, training functions |
| Notebook cells | `cirrl/estimators/drig.py` | All DRIG implementations |

### Step 3: Update Imports

**Old way:**
```python
from setup_singlecell import DPA, OnlyRelu, train_one_iter, eval_mse, drig_est
```

**New way:**
```python
from cirrl import DPA, OnlyRelu
from cirrl.training import train_cirrl_model, eval_mse
from cirrl.estimators import est_drig_gd_auto
```

### Step 4: Convert Notebook to Script

Transform your Jupyter notebook into `experiments/singlecell_experiment.py`:

**Old (Notebook):**
```python
# Cell 1
import torch
from setup_singlecell import DPA

# Cell 2
dpa = DPA(...)

# Cell 3
for epoch in range(1000):
    # training code...
```

**New (Script):**
```python
"""Single-cell CIRRL experiment."""

from cirrl import DPA, OnlyRelu, train_cirrl_model

def main():
    # Load data
    X, Y, E, X_test, Y_test = load_singlecell_data(...)
    
    # Initialize model
    dpa = DPA(...)
    
    # Train
    history = train_cirrl_model(dpa, X, Y, E, X_test, Y_test)
    
if __name__ == "__main__":
    main()
```

## Quick Start

### Example 1: Basic Training

```python
from cirrl import DPA, OnlyRelu, train_cirrl_model
from cirrl.utils.data import load_singlecell_data

# Load data
X, Y, E, X_test, Y_test = load_singlecell_data(
    'data/singlecell.pkl',
    'data/singlecelltest.pkl'
)

# Initialize model
dpa = DPA(
    data_dim=9,
    latent_dims=[3],
    condition_dim=11,
    hidden_dim=400,
    priorvar=OnlyRelu(epsilon=0.1)
)

# Train
history = train_cirrl_model(
    dpa, X, Y, E, X_test, Y_test,
    alpha=0.1, beta=0, gamma=5,
    epochs=1000
)

print(f"Final test MSE: {history['test_mse'][-1]:.4f}")
```

### Example 2: Using DRIG with Different Gammas

```python
import numpy as np
from cirrl.estimators import est_drig_gd_auto
from cirrl.utils.data import prepare_drig_data_from_latents

# Extract latent representations
z = dpa.encode(X)
z_test = dpa.encode(X_test)

# Prepare data for DRIG
train_data = prepare_drig_data_from_latents(z, Y, E)

# Test different gamma values
gammas = np.linspace(0, 15, 16)
results = []

for gamma in gammas:
    coef = est_drig_gd_auto(train_data, gamma=gamma, device='cuda')
    
    # Compute test MSE
    y_pred = z_test.numpy() @ coef
    mse = np.mean((y_pred.flatten() - Y_test.numpy()) ** 2)
    results.append({'gamma': gamma, 'mse': mse})

# Find best gamma
best = min(results, key=lambda x: x['mse'])
print(f"Best gamma: {best['gamma']}, MSE: {best['mse']:.4f}")
```

### Example 3: Using Configuration Files

Create `config.yaml`:
```yaml
model:
  data_dim: 9
  latent_dims: [3]
  hidden_dim: 400

training:
  epochs: 1000
  alpha: 0.1
  gamma: 5
```

Load and use:
```python
import yaml
from cirrl import DPA, train_cirrl_model

# Load config
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# Initialize from config
dpa = DPA(**config['model'])

# Train with config
history = train_cirrl_model(dpa, X, Y, E, X_test, Y_test, **config['training'])
```

## Project Structure

```
CIRRL/
â”œâ”€â”€ cirrl/                  # Main package
â”‚   â”œâ”€â”€ models/            # Neural networks (DPA, networks)
â”‚   â”œâ”€â”€ estimators/        # DRIG estimators
â”‚   â”œâ”€â”€ training/          # Training utilities
â”‚   â””â”€â”€ utils/             # Helper functions
â”œâ”€â”€ experiments/           # Experiment scripts
â”‚   â”œâ”€â”€ singlecell_experiment.py
â”‚   â””â”€â”€ configs/          # YAML configurations
â”œâ”€â”€ notebooks/            # Jupyter notebooks
â”œâ”€â”€ tests/               # Unit tests
â”œâ”€â”€ data/                # Data files (not tracked)
â””â”€â”€ results/             # Results (not tracked)
```

## Common Tasks

### Task 1: Train a Model

```bash
# Using the experiment script
python experiments/singlecell_experiment.py

# Or with configuration
python experiments/singlecell_experiment.py --config experiments/configs/singlecell_config.yaml
```

### Task 2: Run Tests

```bash
# All tests
make test

# Specific test
pytest tests/test_drig.py::test_est_drig_basic -v

# With coverage
make test-cov
```

### Task 3: Format Code

```bash
# Format all code
make format

# Check formatting without modifying
make check-format
```

### Task 4: Add a New DRIG Estimator

1. Add function to `cirrl/estimators/drig.py`:
```python
def est_drig_my_method(data, gamma, **kwargs):
    """My new DRIG method."""
    # Implementation
    return coefficients
```

2. Add to `__init__.py`:
```python
from cirrl.estimators.drig import est_drig_my_method
```

3. Add tests in `tests/test_drig.py`:
```python
def test_est_drig_my_method(synthetic_data):
    """Test new DRIG method."""
    data_list, true_coef = synthetic_data
    coef = est_drig_my_method(data_list, gamma=0.5)
    assert coef.shape == true_coef.shape
```

4. Update documentation:
```python
"""
DRIG Estimators

Available methods:
- est_drig: Closed-form solution
- est_drig_my_method: My new method
"""
```

### Task 5: Create a New Experiment

```python
# experiments/my_experiment.py
"""My custom experiment."""

from cirrl import DPA, train_cirrl_model
from cirrl.utils.data import load_singlecell_data

def main():
    # Your experiment code
    pass

if __name__ == "__main__":
    main()
```

## Troubleshooting

### Problem: Import Errors

**Error:** `ModuleNotFoundError: No module named 'cirrl'`

**Solution:**
```bash
# Make sure package is installed
pip install -e .

# Verify installation
python -c "import cirrl; print(cirrl.__version__)"
```

### Problem: CUDA Out of Memory

**Error:** `RuntimeError: CUDA out of memory`

**Solutions:**
1. Reduce batch size:
```python
history = train_cirrl_model(..., batch_size=512)
```

2. Use CPU:
```python
dpa = DPA(..., device='cpu')
```

3. Use batched DRIG:
```python
from cirrl.estimators import est_drig_gd_batch
coef = est_drig_gd_batch(data, gamma=5, batch_size=512)
```

### Problem: Slow Training

**Solutions:**

1. Use GPU:
```python
dpa = DPA(..., device='cuda')
```

2. Reduce model size:
```python
dpa = DPA(hidden_dim=200, num_layer=2)  # Instead of 400, 3
```

3. Use analytical initialization for DRIG:
```python
from cirrl.estimators import est_drig_gd_analytical_init
coef = est_drig_gd_analytical_init(data, gamma=5, iters=2000)
```

### Problem: Tests Failing

**Solution:**
```bash
# Clean environment
make clean

# Reinstall
pip install -e .

# Run tests with verbose output
pytest -v -s
```

### Problem: Model Not Converging

**Check:**
1. Learning rate (try 1e-3, 1e-4, 1e-5)
2. Data normalization
3. Loss components (print during training)

```python
history = train_cirrl_model(..., verbose=True, print_every=10)

# Check if losses are decreasing
import matplotlib.pyplot as plt
plt.plot(history['test_mse'])
plt.show()
```

## Next Steps

1. **Read the documentation:** See `docs/` for detailed API documentation
2. **Explore examples:** Check `notebooks/quickstart.ipynb`
3. **Run experiments:** Try `python experiments/singlecell_experiment.py`
4. **Contribute:** See `CONTRIBUTING.md` for guidelines

## Additional Resources

- **README.md**: Project overview and installation
- **PROJECT_STRUCTURE.md**: Detailed structure explanation
- **CHANGELOG.md**: Version history and changes
- **CONTRIBUTING.md**: How to contribute
- **API Documentation**: `docs/` directory

## Getting Help

- **Issues**: Report bugs on GitHub Issues
- **Discussions**: Ask questions on GitHub Discussions
- **Email**: Contact maintainers for private inquiries

## Summary

You should now have:
- âœ… Clean package structure
- âœ… Working installation
- âœ… Understanding of basic usage
- âœ… Knowledge of common tasks
- âœ… Solutions to common problems

Welcome to CIRRL! ðŸŽ‰
